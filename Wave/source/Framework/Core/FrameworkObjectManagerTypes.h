/* Copyright (c) 2005-2013 Brocade Communications Systems, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at:
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/***************************************************************************
 *   Copyright (C) 2005 Brocade Communications Systems, Inc.               *
 *   All rights reserved.                                                  *
 *   Author : Vidyasagara Reddy Guntaka                                    *
 ***************************************************************************/

#ifndef FRAMEWORKOBJECTMANAGERTYPES_H
#define FRAMEWORKOBJECTMANAGERTYPES_H

#include "Framework/Attributes/Attributes.h"

namespace WaveNs
{

typedef enum
{
    FRAMEWORK_OBJECT_MANAGER_CREATE_CLUSTER_WITH_NODES,
    FRAMEWORK_OBJECT_MANAGER_CONFIGURE_CLUSTER_SECONDARY,
    FRAMEWORK_OBJECT_MANAGER_CONFIGURE_CLUSTER_SECONDARY_PHASE_1,
    FRAMEWORK_OBJECT_MANAGER_CONFIGURE_CLUSTER_SECONDARY_PHASE_2,
    FRAMEWORK_OBJECT_MANAGER_CONFIGURE_CLUSTER_SECONDARY_PHASE_3,
    FRAMEWORK_OBJECT_MANAGER_UPDATE_LIST_OF_CLUSTER_SECONDARIES,
    FRAMEWORK_OBJECT_MANAGER_ADD_NODES_TO_CLUSTER,
    FRAMEWORK_OBJECT_MANAGER_DELETE_NODES_FROM_CLUSTER,
    FRAMEWORK_OBJECT_MANAGER_UNCONFIGURE_CLUSTER_SECONDARY,
    FRAMEWORK_OBJECT_MANAGER_DESTORY_CLUSTER,
    FRAMEWORK_OBJECT_MANAGER_REJOIN_NODES_TO_CLUSTER,
    FRAMEWORK_OBJECT_MANAGER_REJOIN_CLUSTER_SECONDARY,
    FRAMEWORK_OBJECT_MANAGER_REJOIN_CLUSTER_SECONDARY_PHASE_1,
    FRAMEWORK_OBJECT_MANAGER_REJOIN_CLUSTER_SECONDARY_PHASE_2,
    FRAMEWORK_OBJECT_MANAGER_REJOIN_CLUSTER_SECONDARY_PHASE_3,
    FRAMEWORK_OBJECT_MANAGER_DETACH_FROM_CLUSTER,
    FRAMEWORK_OBJECT_MANAGER_LOST_HEART_BEAT_MESSAGE,
    FRAMEWORK_OBJECT_MANAGER_PRIMARY_CHANGED_MESSAGE,
    FRAMEWORK_OBJECT_MANAGER_PRIMARY_CHANGED_PHASE_1_MESSAGE,
    FRAMEWORK_OBJECT_MANAGER_PRIMARY_CHANGED_PHASE_2_MESSAGE,
    FRAMEWORK_OBJECT_MANAGER_PRIMARY_CHANGED_PHASE_3_MESSAGE,
    FRAMEWORK_OBJECT_MANAGER_SERVICE_CONTROL_LIST_MESSAGE,
    FRAMEWORK_OBJECT_MANAGER_SERVICE_SET_CPU_AFFINITY_MESSAGE,
    FRAMEWORK_OBJECT_MANAGER_REMOVE_KNOWN_LOCATIONS_MESSAGE,
    FRAMEWORK_OBJECT_MANAGER_EXECUTE_POSTBOOT_PASSES,
    FRAMEWORK_OBJECT_MANAGER_EXECUTE_POST_PERSISTENT_BOOT_PASSES,
    FRAMEWORK_OBJECT_MANAGER_START_EXTERNAL_STATE_SYNCHRONIZATION,
    FRAMEWORK_OBJECT_MANAGER_START_SLOT_FAILOVER,
    FRAMEWORK_OBJECT_MANAGER_BROADCAST_ADDITION_OF_NEW_NODES_EVENT,
    FRAMEWORK_OBJECT_MANAGER_NODES_ADDITION_TO_CLUSTER_COMPLETED_EVENT,
    FRAMEWORK_OBJECT_MANAGER_LOCAL_NODE_DELETED_EVENT,
    FRAMEWORK_OBJECT_MANAGER_DELETE_CLUSTER_EVENT,
    FRAMEWORK_OBJECT_MANAGER_NEW_PRINCIPAL_ESTABLISHED_AFTER_FAILOVER,
    FRAMEWORK_OBJECT_MANAGER_SECONDARY_NODE_FAILURE_NOTIFICATION,
    FRAMEWORK_OBJECT_MANAGER_DISCONNECT_FROM_ALL_NODES,
    FRAMEWORK_OBJECT_MANAGER_POST_BOOT_STARTED_EVENT,
    FRAMEWORK_OBJECT_MANAGER_POST_BOOT_COMPLETED_EVENT,
    FRAMEWORK_OBJECT_MANAGER_CONFIG_REPLAY_STARTED_EVENT,
    FRAMEWORK_OBJECT_MANAGER_CONFIG_REPLAY_COMPLETED_EVENT,
    FRAMEWORK_OBJECT_MANAGER_BROADCAST_PHASE3_START_EVENT,
    FRAMEWORK_OBJECT_MANAGER_BROADCAST_PHASE3_COMPLETE_EVENT,
    FRAMEWORK_OBJECT_MANAGER_ESTABLISH_PRINCIPAL_AFTER_CLUSTER_REBOOT,
    FRAMEWORK_OBJECT_MANAGER_RESET_NODE_FOR_CLUSTER_MERGE,
    FRAMEWORK_OBJECT_MANAGER_BROADCAST_FAILOVER_COMPLETE_EVENT,
    FRAMEWORK_OBJECT_MANAGER_PRIMARY_CHANGED_EVENT,
    FRAMEWORK_OBJECT_MANAGER_FIPS_ZEROIZE,
    FRAMEWORK_OBJECT_MANAGER_NODE_READY_FOR_ALL_COMMANDS_EVENT,
    FRAMEWORK_OBJECT_MANAGER_START_HA_SYNC_MESSAGE,
    FRAMEWORK_OBJECT_MANAGER_DISCONNECT_FROM_ALL_INSTANCE_CLIENTS,
    FRAMEWORK_OBJECT_MANAGER_INIT_HA_IPADDR_MESSAGE,
    FRAMEWORK_OBJECT_MANAGER_HA_SYNC_CONFIGURE_STANDBY,
    FRAMEWORK_OBJECT_MANAGER_PREPARE_NODE_FOR_HA,
    FRAMEWORK_OBJECT_MANAGER_UPDATE_DATABASE_SCHEMA,
    FRAMEWORK_OBJECT_MANAGER_LISTEN_FOR_MANAGED_OBJECT, 
    FRAMEWORK_OBJECT_MANAGER_HA_SYNC_UPDATE, 
    FRAMEWORK_OBJECT_MANAGER_GET_FIRMWARE_VERSION, 
    FRAMEWORK_OBJECT_MANAGER_END_HA_SYNC_MESSAGE,
    FRAMEWORK_OBJECT_MANAGER_START_CCMD_HA_SYNC_MESSAGE,
    FRAMEWORK_OBJECT_MANAGER_CCMD_HA_SYNC_UPDATE_MESSAGE,
    FRAMEWORK_OBJECT_MANAGER_SET_SYNC_STATE_MESSAGE,
    FRAMEWORK_OBJECT_MANAGER_GET_SYNC_STATE_MESSAGE,
    FRAMEWORK_OBJECT_MANAGER_PREPARE_FOR_WARM_RECOV_WITH_DEFAULT_CONFIG_MESSAGE,
    FRAMEWORK_OBJECT_MANAGER_SYNC_CONFIGURATION_MESSAGE,
    FRAMEWORK_OBJECT_MANAGER_STORE_CONFIGURATION_INTENT,
    FRAMEWORK_OBJECT_MANAGER_REMOVE_CONFIGURATION_INTENT,
    FRAMEWORK_OBJECT_MANAGER_LAST_CONFIG_REPLAY_COMPLETED_EVENT,
    FRAMEWORK_OBJECT_MANAGER_PREPARE_FOR_HA_RECOV_WITH_PERSISTENT_CONFIG_MESSAGE,
    FRAMEWORK_OBJECT_MANAGER_CONFIGURE_CLUSTER_SECONDARY_HA_PEER,
    FRAMEWORK_OBJECT_MANAGER_CONFIGURE_CLUSTER_SECONDARY_HA_PEER_PHASE_1,
    FRAMEWORK_OBJECT_MANAGER_CONFIGURE_CLUSTER_SECONDARY_HA_PEER_PHASE_3,
    FRAMEWORK_OBJECT_MANAGER_REJOIN_CLUSTER_SECONDARY_HA_PEER,
    FRAMEWORK_OBJECT_MANAGER_REJOIN_CLUSTER_SECONDARY_HA_PEER_PHASE_1,
    FRAMEWORK_OBJECT_MANAGER_REJOIN_CLUSTER_SECONDARY_HA_PEER_PHASE_3,
    FRAMEWORK_OBJECT_MANAGER_PRIMARY_CHANGED_MESSAGE_HA_PEER,
    FRAMEWORK_OBJECT_MANAGER_PRIMARY_CHANGED_PHASE_1_HA_PEER_MESSAGE,
    FRAMEWORK_OBJECT_MANAGER_PRIMARY_CHANGED_PHASE_3_HA_PEER_MESSAGE,
    FRAMEWORK_OBJECT_MANAGER_ROLLBACK_STANDBY_ON_ACTIVE_ROLLBACK,
    FRAMEWORK_OBJECT_MANAGER_EXECUTE_POST_PERSISTENT_BOOT_SERVICE_AND_WAVE_SLOTS,
    FRAMEWORK_OBJECT_MANAGER_REPLAY_CONFIG_FILE

} FrameworkObjectManagerOperationCodes;

typedef enum
{
    CHANGE_CONFIGURATION_VALIDITY,
    SAVE_CONFIGURATION,
    LOAD_CONFIGURATION,
    BACKUP_CONFIGURATION,
    RESTORE_CONFIGURATION
} ConfigurationWorkerOperationTypes;

// Tags for the message data buffers

// Dcmd HA sync Info tag range: 1-999. Please add new tag at the end of this enum define

typedef enum
{
    FIRMWARE_VERSION         =  1,
    CONTEXT_INFO             =  2,
    VCS_CONFIG               =  3,
    STARTUP_FILE_OBJECT      =  4,
    CFG_OBJECT               =  5,
    DB_SYNC_FILE             =  6,
    ACTIVE_DB_SCHEMA_OBJECT  =  7,
    STANDBY_DB_SCHEMA_OBJECT =  8,
    DB_DUMP_TYPE             =  9,
    ACTIVE_HA_SYNC_VERSION   =  10,
    STANDBY_HA_SYNC_VERSION  =  11,
    ACTIVE_DB_INFRA_VERSION  =  12,
    STANDBY_DB_INFRA_VERSION =  13,
    CFG_VALIDITY             =  14
} HaSyncInfoTags;

// Cluster related data tag 
#define AUTO_UPGRADE_OBJECT 10

// Plug-in data buffers start at 1000 and up

// Context information
typedef enum
{
    UNKNOWN_CONTEXT_INFO,
    SYNC_DUMP_CONTEXT,  // Only sync dump cases will the standby reboot itself
    COPY_RUNNING_TO_STARTUP_CONTEXT,
    COPY_DEFAULT_TO_STARTUP_CONTEXT,
    COPY_FILE_TO_STARTUP_CONTEXT,
    VCS_CLUSTER_CONF_CHANGE_CONTEXT, 
    CCMD_SYNC_DUMP_CONTEXT,
    CCMD_COPY_RUNNING_TO_STARTUP_CONTEXT,
    SYNC_DUMP_WITH_PAUSE_DB_CONTEXT,  // Only sync dump cases will the standby reboot itself
    SYNC_DUMP_ISSU_CONTEXT,
    CCMD_SYNC_DUMP_WITH_PAUSE_DB_CONTEXT,
    CCMD_SYNC_DUMP_ISSU_CONTEXT,
    COPY_RUNNING_TO_STARTUP_OPTIMIZATION_CONTEXT 
} SyncContextTypes;

// Sync states for HA sync
typedef enum
{
    UNKNOWN_SYNC_STATE,
    IN_SYNC,
    OUT_OF_SYNC
} SyncStates;

// Whether to send data only or data and schema DB dump
typedef enum
{
    SAME_SCHEMA,
    CONVERTIBLE_SCHEMA,
    NOT_CONVERTIBLE_SCHEMA
} DbSchemaTypes;

typedef enum
{
    UNKNOWN_VERSION = 0,
    STARTUP_CFG_SYNC,                  // Hydra HA version
    RUNNING_CFG_SYNC_SAME_VERSION      // Leo HA version

} HaSyncVersions;

// Flag to trigger reboot after config update
#define HA_STANDBY_REBOOT_REQUIRED 1
}

#endif // FRAMEWORKOBJECTMANAGERTYPES_H
